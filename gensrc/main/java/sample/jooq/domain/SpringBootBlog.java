/**
 * This class is generated by jOOQ
 */
package sample.jooq.domain;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpringBootBlog extends SchemaImpl {

    private static final long serialVersionUID = 1688984974;

    /**
     * The reference instance of <code>spring_boot_blog</code>
     */
    public static final SpringBootBlog SPRING_BOOT_BLOG = new SpringBootBlog();

    /**
     * The table <code>spring_boot_blog.category</code>.
     */
    public final Category CATEGORY = sample.jooq.domain.Category.CATEGORY;

    /**
     * The table <code>spring_boot_blog.category_post</code>.
     */
    public final CategoryPost CATEGORY_POST = sample.jooq.domain.CategoryPost.CATEGORY_POST;

    /**
     * The table <code>spring_boot_blog.comment</code>.
     */
    public final Comment COMMENT = sample.jooq.domain.Comment.COMMENT;

    /**
     * The table <code>spring_boot_blog.post</code>.
     */
    public final Post POST = sample.jooq.domain.Post.POST;

    /**
     * The table <code>spring_boot_blog.tag</code>.
     */
    public final Tag TAG = sample.jooq.domain.Tag.TAG;

    /**
     * The table <code>spring_boot_blog.user</code>.
     */
    public final User USER = sample.jooq.domain.User.USER;

    /**
     * No further instances allowed
     */
    private SpringBootBlog() {
        super("spring_boot_blog", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Category.CATEGORY,
            CategoryPost.CATEGORY_POST,
            Comment.COMMENT,
            Post.POST,
            Tag.TAG,
            User.USER);
    }
}
