/**
 * This class is generated by jOOQ
 */
package sample.jooq.domain;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<Record> {

    private static final long serialVersionUID = -149099105;

    /**
     * The reference instance of <code>spring_boot_blog.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>spring_boot_blog.comment.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spring_boot_blog.comment.content</code>.
     */
    public final TableField<Record, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>spring_boot_blog.comment.reg_date</code>.
     */
    public final TableField<Record, Timestamp> REG_DATE = createField("reg_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>spring_boot_blog.comment.post_id</code>.
     */
    public final TableField<Record, Long> POST_ID = createField("post_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>spring_boot_blog.comment.user_id</code>.
     */
    public final TableField<Record, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>spring_boot_blog.comment</code> table reference
     */
    public Comment() {
        this("comment", null);
    }

    /**
     * Create an aliased <code>spring_boot_blog.comment</code> table reference
     */
    public Comment(String alias) {
        this(alias, COMMENT);
    }

    private Comment(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Comment(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SpringBootBlog.SPRING_BOOT_BLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.FKS1SLVNKUEMJSQ2KJ4H3VHX7I1, Keys.FK8KCUM44FVPUPYW6F5BACCX25C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(String alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    public Comment rename(String name) {
        return new Comment(name, null);
    }
}
